#!/usr/bin/env bash

{ # this ensures the entire script is downloaded #

cmd_has() {
  type "$1" > /dev/null 2>&1
}

sn_node_install_dir() {
  if [ -n "$SN_Node_DIR" ]; then
    printf %s "${SN_Node_DIR}"
  else
    printf %s "${HOME}/.safe/node"
  fi
}

sn_node_latest_version() {
  curl -s "https://api.github.com/repos/maidsafe/sn_node/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/'
}

sn_node_download() {
  if cmd_has "curl"; then
    curl --compressed -q "$@"
  elif cmd_has "wget"; then
    # Emulate curl with wget
    ARGS=$(echo "$*" | command sed -e 's/--progress-bar /--progress=bar /' \
                            -e 's/-L //' \
                            -e 's/--compressed //' \
                            -e 's/-I /--server-response /' \
                            -e 's/-s /-q /' \
                            -e 's/-o /-O /' \
                            -e 's/-C - /-c /')
    # shellcheck disable=SC2086
    eval wget $ARGS
  fi
}

sn_node_try_profile() {
  if [ -z "${1-}" ] || [ ! -f "${1}" ]; then
    return 1
  fi
  echo "${1}"
}

#
# Detect profile file if not specified as environment variable
# (eg: PROFILE=~/.myprofile)
# The echo'ed path is guaranteed to be an existing file
# Otherwise, an empty string is returned
#
sn_node_detect_profile() {
  if [ "${PROFILE-}" = '/dev/null' ]; then
    # the user has specifically requested NOT to have Safe Node set in their profile
    return
  fi

  if [ -n "${PROFILE}" ] && [ -f "${PROFILE}" ]; then
    echo "${PROFILE}"
    return
  fi

  detected_profile=''

  if [ -n "${BASH_VERSION-}" ]; then
    if [ -f "$HOME/.bashrc" ]; then
      detected_profile="$HOME/.bashrc"
    elif [ -f "$HOME/.bash_profile" ]; then
      detected_profile="$HOME/.bash_profile"
    fi
  elif [ -n "${ZSH_VERSION-}" ]; then
    detected_profile="$HOME/.zshrc"
  fi

  if [ -z "$detected_profile" ]; then
    for each_profile in ".profile" ".bashrc" ".bash_profile" ".zshrc"
    do
      if detected_profile="$(sn_node_try_profile "${HOME}/${each_profile}")"; then
        break
      fi
    done
  fi

  if [ -n "$detected_profile" ]; then
    echo "$detected_profile"
  fi
}

# sn_node_profile_is_bash_or_zsh() {
#   test_profile="${1-}"
#   case "${test_profile-}" in
#     *"/.bashrc" | *"/.bash_profile" | *"/.zshrc")
#       return
#     ;;
#     *)
#       return 1
#     ;;
#   esac
# }

sn_node_install() {
  platform="unknown-linux-musl"
  sn_node_exec="safe"
  uname_output=$(uname -a)
  case $uname_output in
      Linux*)
          ;;
      Darwin*)
          platform="apple-darwin"
          ;;
      MSYS_NT* | MINGW*)
          platform="pc-windows-msvc"
          sn_node_exec="safe.exe"
          ;;
      *)
          echo "Platform not supported by the Safe Node installation script."
          exit 1
  esac

# https://github.com/maidsafe/sn_node/releases/tag/v0.43.1
# https://github.com/maidsafe/sn_node/releases/download/v0.42.7/sn_node-0.42.7-x86_64-apple-darwin.tar.gz
  node_package="sn_node-$(sn_node_latest_version)-x86_64-$platform.tar.gz"
  node_package_url="https://sn-api.s3.eu-west-2.amazonaws.com/$node_package"
  tmp_dir=$(mktemp -d)
  tmp_dir_package=$tmp_dir/$node_package

  echo "=> Downloading Safe Node package from '$node_package_url'..."
  sn_node_download "$node_package_url" -o "$tmp_dir_package"

  install_dir="$(sn_node_install_dir)"
  echo "=> Unpacking Safe Node to '$install_dir'..."
  mkdir -p "$install_dir"
  tar -xzf $tmp_dir_package -C $install_dir

#   case $uname_output in
#       Linux* | Darwin*)
#           sn_node_profile="$(sn_node_detect_profile)"
#           sn_node_in_path_str="\\nexport PATH=\$PATH:$install_dir"

#           if [ -z "${sn_node_profile-}" ] ; then
#             local tried_profile
#             if [ -n "${PROFILE}" ]; then
#               tried_profile="${sn_node_profile} (as defined in \$PROFILE), "
#             fi
#             echo "=> Shell profile not found. Tried ${tried_profile-}~/.bashrc, ~/.bash_profile, ~/.zshrc, and ~/.profile"
#             echo "=> Create one of them and run this script again"
#             echo "   OR"
#             echo "=> Append the following lines to the correct file yourself:"
#             command printf "${sn_node_in_path_str}"
#             echo
#           else
#             echo "=> Adding statement to '$sn_node_profile' profile to have Safe Node binary path in the \$PATH"
#             if ! command grep -qc "$install_dir" "$sn_node_profile"; then
#               command printf "${sn_node_in_path_str}" >> "$sn_node_profile"
#               echo "=> Statement appended to '$sn_node_profile' profile"
#               echo "=> Close and reopen your terminal to start using Safe Node"
#             else
#               echo "=> Profile '${sn_node_profile}' already contains a statement to set Safe Node in the \$PATH"
#             fi
#           fi
#           ;;
#       MSYS_NT* | MINGW*)
#           if ! command grep -qc "$install_dir" <<< $PATH; then
#             echo "=> Adding Safe Node binary path to the PATH in the system for all users"
#             setx PATH "$PATH:$install_dir" -m
#             echo "=> Close and reopen your terminal to start using Safe Node"
#           else
#             echo "=> Safe Node binary path was already set in the PATH"
#           fi
#           ;;
#   esac

  sn_node_reset
}

#
# Unsets the various functions defined
# during the execution of the install script
#
sn_node_reset() {
  unset -f sn_node_try_profile sn_node_download \
    sn_node_latest_version sn_node_install_dir \
    cmd_has sn_node_detect_profile
    #  \
    # sn_node_profile_is_bash_or_zshsn_node_install
}

sn_node_install

} # this ensures the entire script is downloaded #
